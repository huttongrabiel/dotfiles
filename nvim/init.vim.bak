syntax enable on
set termguicolors
set background=dark

set backspace=indent,eol,start
set tabstop=4 softtabstop=4
set shiftwidth=4
set expandtab
set smartindent
set relativenumber
set nu
set noswapfile
set nowrap
set ruler
set incsearch
set noerrorbells
set nohlsearch
set colorcolumn=80

vnoremap <C-c> "+y

call plug#begin(stdpath('data') . '/plugged')
" Telescope
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'

" Fuzzy finder
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }

Plug 'ThePrimeagen/harpoon'

" NVim LSP
Plug 'neovim/nvim-lspconfig'
Plug 'L3MON4D3/LuaSnip'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-cmdline'
Plug 'hrsh7th/nvim-cmp'

" Colorschemes
Plug 'gruvbox-community/gruvbox'
Plug 'folke/tokyonight.nvim', { 'branch': 'main' }
Plug 'joshdick/onedark.vim'

" Lualine
Plug 'nvim-lualine/lualine.nvim'
" If you want to have icons in your statusline choose one of these
Plug 'kyazdani42/nvim-web-devicons'

" Treesitter
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-treesitter/nvim-treesitter-context'

"Plug 'sevko/vim-nand2tetris-syntax'
call plug#end()

colorscheme onedark

let g:gruvbox_contrast_dark = 'hard'

let g:tokyonight_style = "storm"
let g:tokyonight_transparent = 1

" Rust
let g:rustfmt_autosave = 1

highlight Normal guibg=none
highlight LineNr guifg=#5eacd3
highlight ColorColumn guibg=Gray

let mapleader = " "

" This is SO much faster
inoremap <C-c> <esc>

" Move lines
vnoremap("J", ":m '>+1<CR>gv=gv")
vnoremap("K", ":m '<-2<CR>gv=gv")

" Delete without yanking
nnoremap <leader>d "_d
vnoremap <leader>d "_d

" Yank to clipboard
nnoremap <leader>y "+y
vnoremap <leader>y "+y

" Find files using Telescope command-line sugar.
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

" LSP Config
nnoremap <silent><leader>gd :lua vim.lsp.buf.definition()<CR>
nnoremap <silent><leader>gi :lua vim.lsp.buf.implementation()<CR>
nnoremap <silent><leader>gsh :lua vim.lsp.buf.signature_help()<CR>
nnoremap <silent><leader>gr :lua vim.lsp.buf.references()<CR>
nnoremap <silent><leader>rn :lua vim.lsp.buf.rename()<CR>
nnoremap <silent><leader>gh :lua vim.lsp.buf.hover()<CR>
nnoremap <silent><leader>ge :lua vim.diagnostic.open_float()<CR>

" Harpoon key bindings
nnoremap <silent><leader>hm :lua require("harpoon.mark").add_file()<CR>
nnoremap <silent><C-e> :lua require("harpoon.ui").toggle_quick_menu()<CR>
nnoremap <silent><leader><C-n> :lua require("harpoon.ui").nav_next()<CR>
nnoremap <silent><leader><C-b> :lua require("harpoon.ui").nav_back()<CR>
nnoremap <silent><C-f> :lua require("harpoon.ui").nav_file(1)<CR>
nnoremap <silent><C-x> :lua require("harpoon.ui").nav_file(2)<CR>
nnoremap <silent><C-s> :lua require("harpoon.ui").nav_file(3)<CR>
nnoremap <silent><C-a> :lua require("harpoon.ui").nav_file(4)<CR>

" Compile C++ with F4 (Competitive Programming ONLY!!)
autocmd filetype cpp nnoremap <F4> :w <bar> exec '!g++ '.shellescape('%').' -o '.shellescape('%:r').' && ./'.shellescape('%:r')<CR>

" Trim trailing whitespace, thanks primeagen
fun! TrimWhitespace()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfun

augroup WHUTY
    autocmd!
    autocmd BufWritePre * :call TrimWhitespace()
    autocmd BufWritePre *.rs :lua vim.lsp.buf.formatting()
augroup END

lua << EOF

    -- treesitter config
    require'nvim-treesitter.configs'.setup {
      ensure_installed = "all",
      highlight = {
          enable = true,
          additional_vim_regex_highlighting = false,
      },
      incremental_selection = { enable = true },
      textobjects = { enable = true }
    }

    -- nvim-cmp config
    local cmp = require'cmp'

    cmp.setup({
        snippet = {
          -- REQUIRED - you must specify a snippet engine
          expand = function(args)
            -- vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
            require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
            -- require('snippy').expand_snippet(args.body) -- For `snippy` users.
            -- vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
          end,
        },
        window = {
          -- completion = cmp.config.window.bordered(),
          -- documentation = cmp.config.window.bordered(),
        },
        mapping = cmp.mapping.preset.insert({
          ['<C-b>'] = cmp.mapping.scroll_docs(-4),
          ['<C-f>'] = cmp.mapping.scroll_docs(4),
          ['<C-Space>'] = cmp.mapping.complete(),
          ['<C-e>'] = cmp.mapping.abort(),
          ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
        }),
        sources = cmp.config.sources({
          { name = 'nvim_lsp' },
          -- { name = 'vsnip' }, -- For vsnip users.
          { name = 'luasnip' }, -- For luasnip users.
          -- { name = 'ultisnips' }, -- For ultisnips users.
          -- { name = 'snippy' }, -- For snippy users.
        }, {
          { name = 'buffer' },
        })
    })

    -- treesitter context
    require'treesitter-context'.setup{
        enable = true, -- Enable this plugin (Can be enabled/disabled later via commands)
        max_lines = 0, -- How many lines the window should span. Values <= 0 mean no limit.
        trim_scope = 'outer', -- Which context lines to discard if `max_lines` is exceeded. Choices: 'inner', 'outer'
        patterns = { -- Match patterns for TS nodes. These get wrapped to match at word boundaries.
            -- For all filetypes
            -- Note that setting an entry here replaces all other patterns for this entry.
            -- By setting the 'default' entry below, you can control which nodes you want to
            -- appear in the context window.
            default = {
                'class',
                'function',
                'method',
                -- 'for', -- These won't appear in the context
                -- 'while',
                -- 'if',
                -- 'switch',
                -- 'case',
            },
            -- Example for a specific filetype.
            -- If a pattern is missing, *open a PR* so everyone can benefit.
            --   rust = {
            --       'impl_item',
            --   },
        },
        exact_patterns = {
            -- Example for a specific filetype with Lua patterns
            -- Treat patterns.rust as a Lua pattern (i.e "^impl_item$" will
            -- exactly match "impl_item" only)
            -- rust = true,
        },

        -- [!] The options below are exposed but shouldn't require your attention,
        --     you can safely ignore them.

        zindex = 20, -- The Z-index of the context window
        mode = 'cursor',  -- Line used to calculate context. Choices: 'cursor', 'topline'
    }

    local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
    -- LSP Config
    require'lspconfig'.rust_analyzer.setup{ capabilities = capabilities }
    require'lspconfig'.clangd.setup{ capabilities = capabilities }
    require'lspconfig'.hls.setup{ capabilities = capabilities }

    -- Lua Line
    require('lualine').setup {
        options = {
            theme = 'nightfly'
        }
    }
EOF
